// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ges.web;

import com.ges.domain.Exam;
import com.ges.domain.GesUser;
import com.ges.domain.Mark;
import com.ges.domain.Student;
import com.ges.web.MarkController;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.function.Predicate;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect MarkController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String MarkController.create(@Valid Mark mark, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, mark);
            return "marks/create";
        }
        uiModel.asMap().clear();
        mark.persist();
        return "redirect:/marks/" + encodeUrlPathSegment(mark.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String MarkController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Mark());
        return "marks/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String MarkController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("mark", Mark.findMark(id));
        uiModel.addAttribute("itemId", id);
        return "marks/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String MarkController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
    	Authentication currentUser = SecurityContextHolder.getContext().getAuthentication();
//    	if(currentUser.getAuthorities().stream().anyMatch(r -> r.getAuthority().equals("ROLE_STUDENT"))) {
		if(currentUser.getAuthorities().stream().anyMatch(new Predicate<GrantedAuthority>() {
															public boolean test(GrantedAuthority r) {
																return r.getAuthority().equals("ROLE_STUDENT");
															}
			})) {
    		String currentUserName = currentUser.getName();
    		System.out.println(currentUserName);
    		Student currentStudent = Student.findStudentByUsername(currentUserName);
    		if(currentStudent != null) {
    			uiModel.addAttribute("marks", Mark.findMarkByStudent(currentStudent));
    		}else {
    			uiModel.addAttribute("marks", new ArrayList<Mark>());
    		}
    		return "marks/list";
    	}
    	// TO-DO : other cases (teacher, staff, admin, etc...)
    	return null;
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String MarkController.update(@Valid Mark mark, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, mark);
            return "marks/update";
        }
        uiModel.asMap().clear();
        mark.merge();
        return "redirect:/marks/" + encodeUrlPathSegment(mark.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String MarkController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, Mark.findMark(id));
        return "marks/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String MarkController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Mark mark = Mark.findMark(id);
        mark.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/marks";
    }
    
    void MarkController.populateEditForm(Model uiModel, Mark mark) {
        uiModel.addAttribute("mark", mark);
        uiModel.addAttribute("exams", Exam.findAllExams());
        uiModel.addAttribute("students", Student.findAllStudents());
    }
    
    String MarkController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
