// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ges.domain;

import com.ges.domain.NonAttendance;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect NonAttendance_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager NonAttendance.entityManager;
    
    public static final List<String> NonAttendance.fieldNames4OrderClauseFilter = java.util.Arrays.asList("student", "naDate", "subject", "justified", "reason");
    
    public static final EntityManager NonAttendance.entityManager() {
        EntityManager em = new NonAttendance().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long NonAttendance.countNonAttendances() {
        return entityManager().createQuery("SELECT COUNT(o) FROM NonAttendance o", Long.class).getSingleResult();
    }
    
    public static List<NonAttendance> NonAttendance.findAllNonAttendances() {
        return entityManager().createQuery("SELECT o FROM NonAttendance o", NonAttendance.class).getResultList();
    }
    
    public static List<NonAttendance> NonAttendance.findAllNonAttendances(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM NonAttendance o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, NonAttendance.class).getResultList();
    }
    
    public static NonAttendance NonAttendance.findNonAttendance(Long id) {
        if (id == null) return null;
        return entityManager().find(NonAttendance.class, id);
    }
    
    public static List<NonAttendance> NonAttendance.findNonAttendanceEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM NonAttendance o", NonAttendance.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<NonAttendance> NonAttendance.findNonAttendanceEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM NonAttendance o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, NonAttendance.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void NonAttendance.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void NonAttendance.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            NonAttendance attached = NonAttendance.findNonAttendance(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void NonAttendance.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void NonAttendance.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public NonAttendance NonAttendance.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        NonAttendance merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
